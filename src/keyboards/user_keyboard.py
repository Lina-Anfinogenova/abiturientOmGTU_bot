from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram import types

from getDataClass import faculties

button = {
    "aboutBot": "‚ÑπÔ∏è –û –±–æ—Ç–µ",
    "aboutVUZ": "üìç –û –í–£–ó–µ",
    "specialties": "üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–±–∏—Ç–µ—Ä–∏–µ–Ω—Ç–æ–≤",
    "openDays": "üìÖ –î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π",
    "Contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
    "FAQ": "‚ùì FAQ"
}


#    "shop": "üõç –ú–∞–≥–∞–∑–∏–Ω"}


def get_reply_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text = button["aboutBot"]))
    builder.row(
        KeyboardButton(text = button["aboutVUZ"])
    )
    builder.row(
        KeyboardButton(text = button["specialties"])
    )
    return builder.as_markup(resize_keyboard = True)


# inlineButton = {
#     "confirm": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
#     "cancel": "‚ùå –û—Ç–º–µ–Ω–∞",
#     "openSite": "üîó –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç"
# }
# urlSite = "https://example.com"
#
#
# def get_inline_keyboard():
#     builder = InlineKeyboardBuilder()
#     builder.row(
#         InlineKeyboardButton(text=inlineButton["confirm"], callback_data="confirm"),
#         InlineKeyboardButton(text=inlineButton["cancel"], callback_data="cancel")
#     )
#     builder.row(
#         InlineKeyboardButton(text=inlineButton["openSite"], url=urlSite)
#     )
#     return builder.as_markup()

def get_inline_keyboard_faculties():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="AlSpecialties"))
    for facoltet in faculties:
        builder.row(InlineKeyboardButton(text = facoltet["short_name_faculty"],
                                         callback_data = "faculty_" + str(facoltet["id_faculty"])
                                         )
                    )
    return builder.as_markup()

#–∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
#–Ω—É–∂–Ω–æ –µ—â–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é - –ø–æ–∫–∞–∑ –ø–æ 5 —à—Ç. —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def get_inline_keyboard_specialties(spec: dict):
    builder = InlineKeyboardBuilder()
    for speciality in spec:
        print(speciality["full_name_speciality"])
        builder.row(InlineKeyboardButton(text=speciality["full_name_speciality"],
                                         callback_data="speciality_" + str(speciality["id_speciality"])
                                         )
                    )
    return builder.as_markup()


def create_keyboard(specialties: list, faculty_id: int, page: int, total_pages: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    for spec in specialties:
        buttons.append([
            types.InlineKeyboardButton(
                text=spec['full_name_speciality'],
                callback_data=f"spec_{spec['id_speciality']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"prev_page:{faculty_id}:{page}"
            )
        )

    if page < total_pages - 1:
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"next_page:{faculty_id}:{page}"
            )
        )

    if pagination_buttons:
        buttons.append(pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º
    buttons.append([
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º",
            callback_data="back_to_faculties"
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=buttons)
